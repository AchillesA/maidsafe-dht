#summary Developer Build Instructions
  * [#Introduction Introduction]
  * [#Project_Requirements Project Requirements]
    * [#Essential Essential]
    * [#Recommended,_non-essential Recommended, non-essential]
    * [#Creating_the_Required_Build_Environment_in_Windows Creating the Required Build Environment in Windows]
  * [#Making_and_Installing_maidsafe-dht Making and Installing maidsafe-dht]
    * [#Linux Linux]
    * [#Windows Windows]

= Introduction =
This page explains how to build the maidsafe-dht project and details prerequisites to building the project.
= Project Requirements =
=== Essential ===
  * [http://www.cmake.org/cmake/resources/software.html CMake (minimum version 2.8)] To build the project, CMake must be installed and in your path.<br><br>
  * [http://sourceforge.net/projects/boost/files/boost Boost (minimum version 1-40)] The libraries should be built in static, multi-threaded, release mode. Required boost components are:
    * date_time
    * filesystem
    * program_options
    * system
    * thread
  If using [http://www.boost.org/doc/libs/1_41_0/more/getting_started/windows.html#get-bjam bjam] to install boost, the following command run from a freshly unzipped boost root dir will build the appropriate libraries:<br>`mkdir Build && bjam toolset=gcc variant=release link=static threading=multi runtime-link=shared --build-dir=Build --layout=versioned --with-date_time --with-filesystem --with-program_options --with-system --with-thread install --prefix=c:\usr stage`<br>
  * [http://code.google.com/p/googletest/downloads/list Google Test (minimum version 1.4)]<br><br>
  * [http://code.google.com/p/protobuf/downloads/list Google Protocol Buffers (version 2.1.0)]<br><br>

=== Recommended, non-essential ===
  * [http://www.python.org/download Python] (allows a style checker to run)<br><br>
  * [http://code.google.com/p/google-glog/downloads/list Google-glog] (allows logging)<br><br>
  * [http://www.codeblocks.org/downloads CodeBlocks IDE] (a CodeBlocks project is created after running cmake)<br><br>

=== Creating the Required Build Environment in Windows ===
If you don't already have the prerequisite components mentioned above, then it may be easiest to create a Linux-esque environment in which to make and install them (with the exception of the Boost libraries, since [http://www.boost.org/doc/libs/1_41_0/more/getting_started/windows.html#get-bjam bjam] can be run from a Windows command terminal).
This can run alongside a standard Visual Studio implementation, since it uses `c:\usr\lib` rather than MSVC's `c:\lib` so this other environment won't mess with your libraries. If you decide to install the libraries and headers to a location other than `c:\usr`, this will have to be made patent on your local copy of the CMakeList.txt file.
To help create this environment we have bundled the following installers into this [http://maidsafe-dht.googlecode.com/files/wintools_02.zip zipped folder].
  * [http://www.cmake.org/cmake/resources/software.html CMake 2.8.0]
  * [http://www.codeblocks.org/downloads CodeBlocks 8.02]
  * [http://tdragon.net/recentgcc TDM's GCC/MinGW]
  * [http://www.mingw.org/wiki/msys MSYS 1.0.11]
  * [http://nsis.sourceforge.net/Download NSIS 2.45] (This will allow you to build an installer)
To create the Linux environment in Windows:
  # Download the [http://maidsafe-dht.googlecode.com/files/wintools_02.zip zipped bundle] or individual installers above.
  # Install tdm-mingw and add it to your path (select this option during install).
  # Install MSYS. When asked about the interface with MinGW, select YES, then enter `c:\MinGW` as the location.
Running MSYS now allows you to make and install the above required libraries ([http://code.google.com/p/googletest/downloads/list Google Test], [http://code.google.com/p/protobuf/downloads/list Google Protocol Buffers], [http://code.google.com/p/google-glog/downloads/list Google-glog]) as though in a Linux environment. Proceed to build the libraries. In most cases this will usually involve `cd` to the library's root, running `./configure --prefix=/c/usr` then `make` then `make install`.

*Note*: The MSYS equivalent of e.g. "`c:\dir`" is "`/c/dir`". Please also be aware that MSYS does not handle spaces in paths so you MUST build this in a path with no spaces (e.g. not "`C:\Documents and Settings`").<br><br>

= Making and Installing maidsafe-dht =

=== Linux ===

  # Download the [http://code.google.com/p/maidsafe-dht/source/checkout maidsafe-dht src].
  # `cd` to build dir for linux (`src/build/Linux`)
  # Run `cmake ../.. -G"CodeBlocks - Unix Makefiles"`
  # Run `make` (this will make all). Other options:
    * Run `make Experimental` to configure, build, test and upload to our [http://dash.maidsafe.net/index.php?project=maidsafe-dht dashboard].
    * Run `make package` to create auto rpm or deb.
    * Run `make install` to install the maidsafe-dht library to `/usr/lib` and API headers to `/usr/include`.

=== Windows ===

  # Download the [http://code.google.com/p/maidsafe-dht/source/checkout maidsafe-dht src].
  # Open a Windows command terminal and `cd` to build dir for Windows (`src\build\Win`)
  # Run `cmake ..\.. -G"CodeBlocks - MinGW Makefiles"`. This will create a CodeBlocks project `src\build\Win\maidsafe-dht.cbp` which will allow you make and install all the targets from within the CodeBlocks IDE.
If MinGW was added to your path, you should also be able to build the targets from a Windows command terminal:
  * Run `mingw32-make` to make all targets.
  * Run `mingw32-make Experimental` to configure, build, test and upload to our [http://dash.maidsafe.net/index.php?project=maidsafe-dht dashboard].
  * Run `mingw32-make package` to create an installer.
  * Run `mingw32-make install` to install the maidsafe-dht library to `c:\usr\lib` and API headers to `c:\usr\include`.
*Note*: We do not offer MSVC support any more.